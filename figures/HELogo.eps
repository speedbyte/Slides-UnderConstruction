%!PS-Adobe-3.0 EPSF-3.0
%%Title: (HE_Logo_4c_frei.eps)
%%Version: 1 6
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 02:09:44 10/17/11
%%For: (Rechenzentrum)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 18 14 142 43
%%HiResBoundingBox: 17.891 14.174 141.732 42.52
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf HB EF t2 irt  0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 12823 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2011-10-17T02:09:44+02:00</xap:CreateDate>
         <xap:ModifyDate>2011-10-17T02:09:44+02:00</xap:ModifyDate>
         <xap:MetadataDate>2011-10-17T02:09:44+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>116</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;dirsVdirsVdirsVdirsVdir/AP/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:8F05735154F8E0118551E934B1B17025</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8F05735154F8E0118551E934B1B17025</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4b58617e-f87a-472a-be46-96dd9addd085</stRef:instanceID>
            <stRef:documentID>uuid:6E81DE2C012ADC118A0CA738E3EADA42</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">HE_Logo_4c_frei.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Rechenzentrum</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
17.891 14.174 123.841 28.346 rectclip
q
17.891 14.174 m
141.732 14.174 l
141.732 42.52 l
17.891 42.52 l
h
W
n
n
141.4 29.86 m
141.4 34.155 l
141.4 35.26 140.874 35.812 139.817 35.812 c
139.078 35.812 138.499 35.498 137.796 34.733 c
137.796 35.699 l
136.29 35.699 l
136.29 29.86 l
137.796 29.86 l
137.796 33.377 l
137.998 33.591 l
138.65 34.294 139.091 34.607 139.403 34.607 c
139.768 34.607 139.895 34.344 139.895 33.615 c
139.895 29.86 l
141.4 29.86 l
h
133.49 33.49 m
131.204 33.49 l
131.33 34.281 131.782 34.733 132.448 34.733 c
133.15 34.733 133.453 34.382 133.49 33.49 c
h
134.996 30.426 m
134.444 31.569 l
133.903 31.23 133.678 31.117 133.327 31.017 c
133.088 30.941 132.861 30.916 132.637 30.916 c
132.083 30.916 131.582 31.192 131.33 31.619 c
131.191 31.857 131.154 32.059 131.129 32.548 c
134.996 32.548 l
134.996 33.189 l
134.996 34.771 133.991 35.862 132.549 35.862 c
130.878 35.862 129.623 34.47 129.623 32.624 c
129.623 30.841 130.716 29.697 132.448 29.697 c
133.125 29.697 133.753 29.835 134.369 30.112 c
134.507 30.175 134.72 30.275 134.996 30.426 c
h
127.438 29.145 m
127.438 28.918 127.274 28.654 126.999 28.44 c
126.646 28.152 126.157 27.989 125.704 27.989 c
125.015 27.989 124.474 28.279 124.474 28.643 c
124.474 28.793 124.574 29.019 124.75 29.308 c
124.788 29.346 124.825 29.421 124.876 29.509 c
126.696 29.509 l
127.199 29.509 127.438 29.383 127.438 29.145 c
h
126.759 33.69 m
126.759 33.088 126.332 32.611 125.792 32.611 c
125.253 32.611 124.825 33.088 124.825 33.679 c
124.825 34.281 125.253 34.783 125.78 34.783 c
126.319 34.783 126.759 34.294 126.759 33.69 c
h
129.058 34.57 m
129.058 35.699 l
127.878 35.624 l
127.012 35.624 l
126.458 35.812 126.22 35.862 125.792 35.862 c
124.249 35.862 123.295 35.009 123.295 33.615 c
123.295 33.063 123.47 32.586 123.809 32.185 c
123.946 32.021 124.061 31.933 124.324 31.732 c
124.161 31.606 124.034 31.531 123.959 31.469 c
123.395 31.092 123.194 30.828 123.194 30.489 c
123.194 30.138 123.433 29.91 124.011 29.697 c
123.332 29.119 123.08 28.731 123.08 28.279 c
123.08 27.399 124.047 26.809 125.479 26.809 c
127.438 26.809 128.845 27.863 128.845 29.32 c
128.845 30.263 128.304 30.728 127.161 30.728 c
125.115 30.728 l
124.825 30.728 124.726 30.766 124.726 30.891 c
124.726 31.041 124.913 31.23 125.303 31.519 c
125.491 31.481 125.579 31.481 125.729 31.481 c
127.262 31.481 128.291 32.372 128.291 33.703 c
128.291 34.08 128.229 34.281 128.028 34.57 c
129.058 34.57 l
h
121.749 29.86 m
121.749 34.155 l
121.749 35.26 121.222 35.812 120.167 35.812 c
119.427 35.812 118.849 35.498 118.146 34.733 c
118.146 35.699 l
116.64 35.699 l
116.64 29.86 l
118.146 29.86 l
118.146 33.377 l
118.347 33.591 l
118.999 34.294 119.438 34.607 119.753 34.607 c
120.117 34.607 120.242 34.344 120.242 33.615 c
120.242 29.86 l
121.749 29.86 l
h
114.755 29.86 m
113.262 29.86 1.493 5.8389 re
114.755 29.86 m
h
114.856 37.796 m
114.856 38.362 114.479 38.814 114.016 38.814 c
113.55 38.814 113.161 38.362 113.161 37.796 c
113.161 37.231 113.55 36.78 114.016 36.78 c
114.479 36.78 114.856 37.231 114.856 37.796 c
h
111.453 29.86 m
109.959 29.86 1.494 9.1538 re
111.453 29.86 m
h
108.565 35.297 m
108.037 35.599 107.837 35.674 107.284 35.787 c
106.92 35.862 106.595 35.899 106.317 35.899 c
104.898 35.899 103.944 35.159 103.944 34.067 c
103.944 33.289 104.421 32.736 105.452 32.348 c
106.455 31.958 l
106.857 31.808 107.046 31.606 107.046 31.343 c
107.046 31.029 106.707 30.841 106.129 30.841 c
105.916 30.841 105.703 30.878 105.476 30.953 c
105.049 31.092 104.812 31.205 104.221 31.569 c
103.744 30.351 l
104.384 30.023 104.648 29.923 105.188 29.81 c
105.54 29.734 105.854 29.697 106.142 29.697 c
107.549 29.697 108.478 30.401 108.478 31.469 c
108.478 31.983 108.238 32.511 107.874 32.762 c
107.611 32.963 106.77 33.339 106.116 33.565 c
105.59 33.754 105.388 33.917 105.388 34.181 c
105.388 34.507 105.766 34.733 106.344 34.733 c
106.77 34.733 107.271 34.582 107.687 34.331 c
107.799 34.269 107.938 34.181 108.088 34.08 c
108.565 35.297 l
h
102.765 35.297 m
102.236 35.599 102.036 35.674 101.483 35.787 c
101.12 35.862 100.792 35.899 100.517 35.899 c
99.099 35.899 98.143 35.159 98.143 34.067 c
98.143 33.289 98.62 32.736 99.649 32.348 c
100.654 31.958 l
101.057 31.808 101.245 31.606 101.245 31.343 c
101.245 31.029 100.906 30.841 100.328 30.841 c
100.115 30.841 99.902 30.878 99.675 30.953 c
99.249 31.092 99.011 31.205 98.42 31.569 c
97.942 30.351 l
98.583 30.023 98.847 29.923 99.387 29.81 c
99.737 29.734 100.053 29.697 100.341 29.697 c
101.748 29.697 102.677 30.401 102.677 31.469 c
102.677 31.983 102.438 32.511 102.074 32.762 c
101.811 32.963 100.969 33.339 100.315 33.565 c
99.788 33.754 99.587 33.917 99.587 34.181 c
99.587 34.507 99.965 34.733 100.541 34.733 c
100.969 34.733 101.471 34.582 101.886 34.331 c
101.999 34.269 102.137 34.181 102.287 34.08 c
102.765 35.297 l
h
96.925 29.86 m
96.925 31.205 l
93.296 31.205 l
93.296 33.415 l
96.134 33.415 l
96.134 34.758 l
93.296 34.758 l
93.296 36.804 l
96.762 36.804 l
96.762 38.148 l
91.715 38.148 l
91.715 29.86 l
96.925 29.86 l
h
85.6 33.49 m
83.314 33.49 l
83.44 34.281 83.892 34.733 84.558 34.733 c
85.262 34.733 85.562 34.382 85.6 33.49 c
h
87.107 30.426 m
86.554 31.569 l
86.015 31.23 85.788 31.117 85.437 31.017 c
85.198 30.941 84.972 30.916 84.745 30.916 c
84.194 30.916 83.69 31.192 83.44 31.619 c
83.303 31.857 83.265 32.059 83.238 32.548 c
87.107 32.548 l
87.107 33.189 l
87.107 34.771 86.103 35.862 84.657 35.862 c
82.987 35.862 81.732 34.47 81.732 32.624 c
81.732 30.841 82.824 29.697 84.558 29.697 c
85.236 29.697 85.863 29.835 86.479 30.112 c
86.616 30.175 86.83 30.275 87.107 30.426 c
h
80.565 29.86 m
79.07 29.86 1.4951 9.1538 re
80.565 29.86 m
h
77.299 29.86 m
77.299 35.699 l
75.792 35.699 l
75.792 32.185 l
75.592 31.971 l
74.939 31.28 74.499 30.953 74.174 30.953 c
73.821 30.953 73.695 31.23 73.695 31.945 c
73.695 35.699 l
72.189 35.699 l
72.189 31.405 l
72.189 30.301 72.716 29.76 73.771 29.76 c
74.512 29.76 75.09 30.062 75.792 30.841 c
75.792 29.86 l
77.299 29.86 l
h
70.382 29.86 m
70.382 34.155 l
70.382 35.26 69.854 35.812 68.8 35.812 c
68.058 35.812 67.481 35.498 66.778 34.733 c
66.778 39.014 l
65.271 39.014 l
65.271 29.86 l
66.778 29.86 l
66.778 33.377 l
66.979 33.591 l
67.632 34.294 68.07 34.607 68.386 34.607 c
68.749 34.607 68.874 34.344 68.874 33.615 c
68.874 29.86 l
70.382 29.86 l
h
64.153 30.263 m
63.603 31.481 l
62.961 31.105 62.597 30.979 62.095 30.979 c
61.19 30.979 60.563 31.694 60.563 32.736 c
60.563 33.829 61.266 34.607 62.258 34.607 c
62.711 34.607 62.999 34.494 63.438 34.155 c
64.153 35.297 l
63.665 35.586 63.464 35.674 63.036 35.774 c
62.723 35.837 62.408 35.875 62.082 35.875 c
60.224 35.875 58.981 34.607 58.981 32.724 c
58.981 30.891 60.148 29.697 61.957 29.697 c
62.534 29.697 63.124 29.81 63.665 30.036 c
63.778 30.087 63.94 30.162 64.153 30.263 c
h
58.103 35.297 m
57.574 35.599 57.374 35.674 56.82 35.787 c
56.457 35.862 56.131 35.899 55.854 35.899 c
54.436 35.899 53.481 35.159 53.481 34.067 c
53.481 33.289 53.958 32.736 54.987 32.348 c
55.992 31.958 l
56.395 31.808 56.582 31.606 56.582 31.343 c
56.582 31.029 56.244 30.841 55.666 30.841 c
55.453 30.841 55.239 30.878 55.013 30.953 c
54.586 31.092 54.348 31.205 53.757 31.569 c
53.279 30.351 l
53.92 30.023 54.185 29.923 54.725 29.81 c
55.076 29.734 55.391 29.697 55.679 29.697 c
57.085 29.697 58.015 30.401 58.015 31.469 c
58.015 31.983 57.775 32.511 57.411 32.762 c
57.148 32.963 56.307 33.339 55.653 33.565 c
55.125 33.754 54.925 33.917 54.925 34.181 c
54.925 34.507 55.303 34.733 55.879 34.733 c
56.307 34.733 56.808 34.582 57.224 34.331 c
57.336 34.269 57.474 34.181 57.624 34.08 c
58.103 35.297 l
h
51.975 29.86 m
51.975 34.155 l
51.975 35.26 51.447 35.812 50.392 35.812 c
49.651 35.812 49.074 35.498 48.37 34.733 c
48.37 39.014 l
46.863 39.014 l
46.863 29.86 l
48.37 29.86 l
48.37 33.377 l
48.571 33.591 l
49.225 34.294 49.664 34.607 49.979 34.607 c
50.342 34.607 50.468 34.344 50.468 33.615 c
50.468 29.86 l
51.975 29.86 l
h
45.746 30.263 m
45.194 31.481 l
44.554 31.105 44.19 30.979 43.687 30.979 c
42.782 30.979 42.155 31.694 42.155 32.736 c
42.155 33.829 42.857 34.607 43.85 34.607 c
44.303 34.607 44.591 34.494 45.031 34.155 c
45.746 35.297 l
45.257 35.586 45.057 35.674 44.629 35.774 c
44.315 35.837 44.001 35.875 43.675 35.875 c
41.816 35.875 40.573 34.607 40.573 32.724 c
40.573 30.891 41.741 29.697 43.549 29.697 c
44.127 29.697 44.716 29.81 45.257 30.036 c
45.37 30.087 45.532 30.162 45.746 30.263 c
h
38.1 32.787 m
38.1 31.745 37.471 30.891 36.719 30.891 c
35.966 30.891 35.337 31.745 35.337 32.787 c
35.337 33.816 35.966 34.67 36.719 34.67 c
37.471 34.67 38.1 33.816 38.1 32.787 c
h
39.657 32.787 m
39.657 34.532 38.389 35.862 36.719 35.862 c
35.049 35.862 33.78 34.532 33.78 32.787 c
33.78 31.029 35.049 29.697 36.719 29.697 c
38.389 29.697 39.657 31.029 39.657 32.787 c
h
32.537 29.86 m
32.537 38.148 l
30.954 38.148 l
30.954 34.834 l
26.698 34.834 l
26.698 38.148 l
25.116 38.148 l
25.116 29.86 l
26.698 29.86 l
26.698 33.415 l
30.954 33.415 l
30.954 29.86 l
32.537 29.86 l
[/DeviceCMYK] cs 0.1 1.0 0.8 0.0 sc
f
n
29.729 18.229 m
29.277 17.86 28.715 17.667 28.062 17.667 c
27.407 17.667 26.836 17.86 26.384 18.229 c
25.878 18.644 25.675 19.132 25.675 19.924 c
25.675 23.922 l
26.43 23.922 l
26.43 20.154 l
26.43 19.398 26.486 19.187 26.78 18.864 c
27.084 18.523 27.527 18.339 28.052 18.339 c
28.577 18.339 29.02 18.523 29.323 18.864 c
29.617 19.187 29.674 19.398 29.674 20.154 c
29.674 23.922 l
30.429 23.922 l
30.429 19.924 l
30.429 19.113 30.235 18.644 29.729 18.229 c
0.0 0.0 0.0 0.7 sc
f
n
34.952 17.842 m
34.952 20.799 l
34.952 21.075 34.933 21.168 34.887 21.287 c
34.823 21.426 34.657 21.509 34.463 21.509 c
34.04 21.509 33.588 21.196 32.86 20.394 c
32.86 17.842 l
32.17 17.842 l
32.17 22.015 l
32.86 22.015 l
32.86 21.14 l
33.146 21.462 33.229 21.545 33.432 21.711 c
33.745 21.979 34.158 22.126 34.546 22.126 c
35.282 22.126 35.642 21.748 35.642 20.965 c
35.642 17.842 l
34.952 17.842 l
f
n
37.291 17.842 m
37.982 17.842 -0.691399 4.1728 re
37.291 17.842 m
h
37.641 23.02 m
37.393 23.02 37.19 23.222 37.19 23.471 c
37.19 23.72 37.393 23.922 37.641 23.922 c
37.891 23.922 38.094 23.72 38.094 23.471 c
38.094 23.222 37.891 23.02 37.641 23.02 c
f
n
41.233 17.722 m
40.599 17.722 l
39.032 22.015 l
39.787 22.015 l
40.94 18.634 l
40.957 18.468 l
40.966 18.625 l
42.1 22.015 l
42.856 22.015 l
41.233 17.722 l
f
n
45.416 21.499 m
44.836 21.499 44.431 21.149 44.274 20.504 c
46.319 20.504 l
46.311 21.149 45.987 21.499 45.416 21.499 c
h
44.219 19.988 m
44.219 18.975 44.735 18.357 45.582 18.357 c
45.95 18.357 46.218 18.459 46.67 18.772 c
46.945 18.229 l
46.328 17.842 45.979 17.722 45.436 17.722 c
44.274 17.722 43.491 18.606 43.491 19.924 c
43.491 21.25 44.274 22.126 45.462 22.126 c
46.439 22.126 47.074 21.435 47.074 20.394 c
47.074 19.988 l
44.219 19.988 l
f
n
50.28 21.26 m
50.142 21.379 50.068 21.426 49.985 21.426 c
49.728 21.426 49.396 21.048 48.999 20.329 c
48.999 17.842 l
48.308 17.842 l
48.308 22.015 l
48.999 22.015 l
48.999 21.26 l
49.516 21.923 49.773 22.126 50.086 22.126 c
50.243 22.126 50.437 22.024 50.62 21.84 c
50.28 21.26 l
f
n
52.832 17.722 m
52.657 17.722 52.463 17.74 52.251 17.777 c
51.856 17.851 51.681 17.915 51.266 18.127 c
51.552 18.708 l
51.69 18.634 51.791 18.579 51.865 18.542 c
52.159 18.403 52.528 18.312 52.823 18.312 c
53.246 18.312 53.561 18.542 53.561 18.864 c
53.561 18.966 53.523 19.086 53.478 19.15 c
53.312 19.39 53.117 19.509 52.371 19.813 c
51.561 20.154 51.283 20.439 51.283 20.946 c
51.283 21.674 51.892 22.126 52.869 22.126 c
53.044 22.126 53.229 22.116 53.403 22.079 c
53.716 22.024 53.863 21.96 54.214 21.767 c
53.873 21.204 l
53.606 21.37 53.486 21.426 53.274 21.481 c
53.107 21.526 52.952 21.555 52.795 21.555 c
52.324 21.555 52.021 21.343 52.021 21.029 c
52.021 20.928 52.058 20.836 52.123 20.772 c
52.288 20.606 52.398 20.541 53.153 20.228 c
54.039 19.859 54.287 19.574 54.287 18.92 c
54.287 18.174 53.744 17.722 52.832 17.722 c
f
n
55.732 17.842 m
56.424 17.842 -0.691399 4.1728 re
55.732 17.842 m
h
56.083 23.02 m
55.835 23.02 55.632 23.222 55.632 23.471 c
55.632 23.72 55.835 23.922 56.083 23.922 c
56.332 23.922 56.535 23.72 56.535 23.471 c
56.535 23.222 56.332 23.02 56.083 23.02 c
f
n
58.958 17.722 m
58.479 17.722 58.156 18.1 58.156 18.652 c
58.156 21.435 l
57.457 21.435 l
57.457 21.84 l
58.156 22.015 l
58.156 23.231 l
58.847 23.231 l
58.847 22.015 l
59.953 22.015 l
59.953 21.435 l
58.847 21.435 l
58.847 19.058 l
58.856 18.874 l
58.865 18.744 58.865 18.662 58.874 18.615 c
58.884 18.478 58.967 18.413 59.115 18.413 c
59.29 18.413 59.428 18.486 59.723 18.708 c
60.008 18.247 l
59.52 17.842 59.29 17.722 58.958 17.722 c
f
n
62.273 17.611 m
62.079 17.095 61.924 16.754 61.693 16.385 c
61.527 16.118 61.407 15.943 61.066 15.51 c
60.515 15.934 l
60.929 16.395 61.066 16.579 61.307 17.012 c
61.536 17.417 61.648 17.667 61.887 18.303 c
60.339 22.015 l
61.112 22.015 l
62.116 19.463 l
62.255 19.058 l
62.347 19.463 l
63.203 22.015 l
63.913 22.015 l
62.273 17.611 l
f
n
68.777 21.509 m
68.041 21.509 67.47 20.809 67.47 19.924 c
67.47 19.039 68.041 18.339 68.777 18.339 c
69.505 18.339 70.076 19.039 70.076 19.924 c
70.076 20.809 69.505 21.509 68.777 21.509 c
h
68.777 17.722 m
67.645 17.722 66.714 18.727 66.714 19.924 c
66.714 21.131 67.645 22.126 68.777 22.126 c
69.901 22.126 70.832 21.131 70.832 19.924 c
70.832 18.727 69.901 17.722 68.777 17.722 c
f
n
74.691 23.867 m
74.396 23.968 74.222 24.005 74.011 24.005 c
73.3 24.005 72.95 23.526 72.95 22.531 c
72.95 22.015 l
73.937 22.015 l
73.937 21.435 l
72.95 21.435 l
72.95 17.842 l
72.26 17.842 l
72.26 21.435 l
71.56 21.435 l
71.56 21.84 l
72.26 22.015 l
72.26 22.706 l
72.26 23.895 72.96 24.649 74.057 24.649 c
74.406 24.649 74.654 24.595 74.978 24.447 c
74.691 23.867 l
f
n
78.993 23.111 m
77.998 20.329 l
79.979 20.329 l
78.993 23.111 l
h
80.845 17.842 m
80.217 19.639 l
77.758 19.639 l
77.132 17.842 l
76.32 17.842 l
78.587 24.097 l
79.398 24.097 l
81.654 17.842 l
80.845 17.842 l
f
n
84.574 21.481 m
84.325 21.481 84.021 21.37 83.765 21.196 c
83.599 21.075 83.505 20.983 83.312 20.734 c
83.312 19.288 l
83.312 18.929 83.321 18.883 83.395 18.744 c
83.533 18.505 83.811 18.386 84.233 18.386 c
85.117 18.386 85.689 19.03 85.689 20.034 c
85.689 20.873 85.22 21.481 84.574 21.481 c
h
84.308 17.731 m
83.865 17.731 83.579 17.814 83.312 18.017 c
83.312 15.639 l
82.621 15.639 l
82.621 22.015 l
83.312 22.015 l
83.312 21.49 l
83.662 21.896 84.159 22.135 84.686 22.135 c
85.716 22.135 86.436 21.279 86.436 20.044 c
86.436 18.698 85.541 17.731 84.308 17.731 c
f
n
89.678 21.481 m
89.428 21.481 89.124 21.37 88.866 21.196 c
88.7 21.075 88.607 20.983 88.415 20.734 c
88.415 19.288 l
88.415 18.929 88.424 18.883 88.498 18.744 c
88.637 18.505 88.912 18.386 89.336 18.386 c
90.22 18.386 90.791 19.03 90.791 20.034 c
90.791 20.873 90.321 21.481 89.678 21.481 c
h
89.409 17.731 m
88.967 17.731 88.683 17.814 88.415 18.017 c
88.415 15.639 l
87.724 15.639 l
87.724 22.015 l
88.415 22.015 l
88.415 21.49 l
88.766 21.896 89.262 22.135 89.787 22.135 c
90.819 22.135 91.537 21.279 91.537 20.044 c
91.537 18.698 90.645 17.731 89.409 17.731 c
f
n
92.791000 17.841999 0.691399 6.715799 rectfill

n
95.13 17.842 m
95.82 17.842 -0.690399 4.1728 re
95.13 17.842 m
h
95.48 23.02 m
95.232 23.02 95.028 23.222 95.028 23.471 c
95.028 23.72 95.232 23.922 95.48 23.922 c
95.729 23.922 95.933 23.72 95.933 23.471 c
95.933 23.222 95.729 23.02 95.48 23.02 c
f
n
99.036 21.499 m
98.455 21.499 98.05 21.149 97.895 20.504 c
99.938 20.504 l
99.93 21.149 99.607 21.499 99.036 21.499 c
h
97.838 19.988 m
97.838 18.975 98.355 18.357 99.203 18.357 c
99.57 18.357 99.837 18.459 100.29 18.772 c
100.565 18.229 l
99.949 17.842 99.599 17.722 99.055 17.722 c
97.895 17.722 97.111 18.606 97.111 19.924 c
97.111 21.25 97.895 22.126 99.082 22.126 c
100.059 22.126 100.694 21.435 100.694 20.394 c
100.694 19.988 l
97.838 19.988 l
f
n
104.656 20.56 m
104.656 20.882 104.646 20.974 104.573 21.112 c
104.453 21.343 104.158 21.462 103.734 21.462 c
102.85 21.462 102.278 20.826 102.278 19.822 c
102.278 18.984 102.749 18.376 103.395 18.376 c
103.642 18.376 103.946 18.478 104.204 18.662 c
104.361 18.772 104.462 18.874 104.656 19.113 c
104.656 20.56 l
h
104.656 17.842 m
104.656 18.367 l
104.287 17.952 103.799 17.722 103.273 17.722 c
102.251 17.722 101.532 18.579 101.532 19.813 c
101.532 21.158 102.427 22.126 103.661 22.126 c
104.104 22.126 104.39 22.043 104.656 21.84 c
104.656 24.558 l
105.356 24.558 l
105.356 17.842 l
104.656 17.842 l
f
n
112.494 22.891 m
112.18 23.074 112.052 23.139 111.857 23.203 c
111.628 23.277 111.259 23.332 111.02 23.332 c
110.328 23.332 109.858 22.991 109.858 22.476 c
109.858 22.024 110.126 21.794 111.361 21.14 c
111.774 20.919 112.099 20.716 112.319 20.522 c
112.613 20.273 112.788 19.859 112.788 19.417 c
112.788 18.376 112.016 17.722 110.79 17.722 c
110.374 17.722 109.987 17.796 109.666 17.925 c
109.436 18.017 109.278 18.109 108.882 18.376 c
109.27 18.975 l
109.609 18.744 109.757 18.662 109.97 18.579 c
110.236 18.478 110.532 18.422 110.845 18.422 c
111.563 18.422 111.996 18.763 111.996 19.344 c
111.996 19.519 111.969 19.666 111.903 19.776 c
111.803 19.961 111.628 20.136 111.388 20.273 c
111.286 20.329 110.945 20.504 110.374 20.817 c
109.462 21.306 109.075 21.785 109.075 22.411 c
109.075 23.379 109.878 24.023 111.084 24.023 c
111.434 24.023 111.794 23.978 112.107 23.876 c
112.356 23.793 112.503 23.72 112.845 23.517 c
112.494 22.891 l
f
n
117.137 18.008 m
116.795 17.823 116.391 17.722 115.976 17.722 c
114.704 17.722 113.838 18.598 113.838 19.878 c
113.838 21.196 114.741 22.126 116.021 22.126 c
116.233 22.126 116.437 22.098 116.64 22.043 c
116.916 21.969 117.045 21.904 117.329 21.702 c
116.934 21.14 l
116.611 21.407 116.371 21.499 115.995 21.499 c
115.156 21.499 114.595 20.855 114.595 19.915 c
114.595 18.956 115.156 18.357 116.049 18.357 c
116.454 18.357 116.712 18.45 117.053 18.708 c
117.412 18.164 l
117.294 18.091 117.2 18.035 117.137 18.008 c
f
n
118.427 17.842 m
119.116 17.842 -0.689003 4.1728 re
118.427 17.842 m
h
118.775 23.02 m
118.528 23.02 118.324 23.222 118.324 23.471 c
118.324 23.72 118.528 23.922 118.775 23.922 c
119.024 23.922 119.229 23.72 119.229 23.471 c
119.229 23.222 119.024 23.02 118.775 23.02 c
f
n
122.332 21.499 m
121.751 21.499 121.346 21.149 121.19 20.504 c
123.234 20.504 l
123.226 21.149 122.903 21.499 122.332 21.499 c
h
121.134 19.988 m
121.134 18.975 121.65 18.357 122.499 18.357 c
122.866 18.357 123.133 18.459 123.586 18.772 c
123.861 18.229 l
123.245 17.842 122.895 17.722 122.351 17.722 c
121.19 17.722 120.407 18.606 120.407 19.924 c
120.407 21.25 121.19 22.126 122.378 22.126 c
123.354 22.126 123.99 21.435 123.99 20.394 c
123.99 19.988 l
121.134 19.988 l
f
n
128.007 17.842 m
128.007 20.799 l
128.007 21.075 127.988 21.168 127.942 21.287 c
127.878 21.426 127.712 21.509 127.52 21.509 c
127.095 21.509 126.645 21.196 125.916 20.394 c
125.916 17.842 l
125.225 17.842 l
125.225 22.015 l
125.916 22.015 l
125.916 21.14 l
126.202 21.462 126.284 21.545 126.486 21.711 c
126.8 21.979 127.215 22.126 127.603 22.126 c
128.338 22.126 128.698 21.748 128.698 20.965 c
128.698 17.842 l
128.007 17.842 l
f
n
133.248 18.008 m
132.907 17.823 132.501 17.722 132.087 17.722 c
130.815 17.722 129.949 18.598 129.949 19.878 c
129.949 21.196 130.854 22.126 132.133 22.126 c
132.345 22.126 132.547 22.098 132.75 22.043 c
133.027 21.969 133.155 21.904 133.44 21.702 c
133.045 21.14 l
132.724 21.407 132.482 21.499 132.106 21.499 c
131.267 21.499 130.705 20.855 130.705 19.915 c
130.705 18.956 131.267 18.357 132.161 18.357 c
132.565 18.357 132.824 18.45 133.165 18.708 c
133.523 18.164 l
133.404 18.091 133.312 18.035 133.248 18.008 c
f
n
136.066 21.499 m
135.486 21.499 135.08 21.149 134.924 20.504 c
136.97 20.504 l
136.961 21.149 136.638 21.499 136.066 21.499 c
h
134.869 19.988 m
134.869 18.975 135.386 18.357 136.232 18.357 c
136.601 18.357 136.867 18.459 137.319 18.772 c
137.596 18.229 l
136.979 17.842 136.628 17.722 136.086 17.722 c
134.924 17.722 134.141 18.606 134.141 19.924 c
134.141 21.25 134.924 22.126 136.112 22.126 c
137.09 22.126 137.725 21.435 137.725 20.394 c
137.725 19.988 l
134.869 19.988 l
f
n
140.277 17.722 m
140.103 17.722 139.907 17.74 139.695 17.777 c
139.3 17.851 139.125 17.915 138.711 18.127 c
138.996 18.708 l
139.134 18.634 139.236 18.579 139.309 18.542 c
139.604 18.403 139.972 18.312 140.267 18.312 c
140.69 18.312 141.004 18.542 141.004 18.864 c
141.004 18.966 140.967 19.086 140.921 19.15 c
140.755 19.39 140.562 19.509 139.815 19.813 c
139.005 20.154 138.729 20.439 138.729 20.946 c
138.729 21.674 139.337 22.126 140.313 22.126 c
140.488 22.126 140.672 22.116 140.849 22.079 c
141.161 22.024 141.308 21.96 141.658 21.767 c
141.317 21.204 l
141.05 21.37 140.932 21.426 140.72 21.481 c
140.553 21.526 140.396 21.555 140.24 21.555 c
139.77 21.555 139.466 21.343 139.466 21.029 c
139.466 20.928 139.503 20.836 139.566 20.772 c
139.732 20.606 139.844 20.541 140.599 20.228 c
141.483 19.859 141.732 19.574 141.732 18.92 c
141.732 18.174 141.188 17.722 140.277 17.722 c
f
n
22.87 41.693 m
19.75 41.693 l
19.75 15.001 l
22.87 15.001 l
22.87 14.174 l
17.891 14.174 l
17.891 42.52 l
22.87 42.52 l
22.87 41.693 l
0.0 0.0 0.0 1.0 sc
f
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
