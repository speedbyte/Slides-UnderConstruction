// Build instructions for Software Architectures lecture

defaultTasks 'clean', 'slides'

def parts = ['overview':'00Overview',
             'partI':   '01Principles',
             'partII':  '02SwarchOverview',
             'partIII': '03PatternOverview',
             'partIV':  '04Architecture'];

//             'partV',
//             'partVI',
//             'partVII','
//             'partVIII']

task clean {

}

task slides {
  println "slides"
  doFirst {
    parts.each{ k, v ->
      delete fileTree(dir: projectDir, include: v+'.*') 
	  copy {
		  from 'swarch-beamer.tex'
		  into projectDir
		  rename { String fileName ->
		           v+'.tex';
		  }
		  filter { String line ->
			  line = setPart(line, parts, k)
		  }
	  }
    }
  }

  doLast {
	  parts.each{ k, v ->
//		  if (isWindows) {
//			  exec {
//				  executable=rootProject.ext['cmd']
//				  workingDir=installerDir
//				  args=[
//					  '/c',
//					  rootProject.ext['PROGRAMFILES']+'/'+rootProject.ext['kSign'],
//					  ' /d',
//					  'Genji Scrum Tool Windows Installer',
//					  '/du',
//					  rootProject.ext['TRACKURL'],
//					  '/f',
//					  rootProject.ext['pfx.file'],
//					  '/p',
//					  rootProject.ext['pfx.passwd'],
//					  installerDir+trackInstaller
//				  ]
//			  }
//		  }
//	  
//		  if (isUnix) {
			  exec {
				  executable='xelatex'
				  workingDir=projectDir
				  args=[
					  v+'.tex'
				  ]
			  }
			  exec {
				  executable='xelatex'
				  workingDir=projectDir
				  args=[
					  v+'.tex'
				  ]
			  }
//		  }
	      delete fileTree(dir: projectDir, include: v+'.*', exclude: v+'.pdf')
	  }
  }
}

def String setPart(String line, Map parts, String part) {
	parts.each{k, v ->
		if (line.startsWith("\\$k"+"true")) {
			line = line.replace("true", "false");
		}
	}
	
	if (line.startsWith("\\"+part+"false")) {
		line = line.replace("false", "true");
	}
	return line
}
